#include <iostream>
#include <vector>
#include <map>

using namespace std;
string Alphabet = "абвгдежзийклмнопрстуфхцчшщьыэюя";
map <char, int> index;
map <int, char> letter;
map<string, int> biCount;
map<int, string> mostCommon;

int gcd(int x, int y)
{
    return y ? gcd(y, x % y) : x;
}



int obernene(int a, int m)
{
    vector<int> r;
    int M = m;
    if (gcd(a, m) != 1) return 0;
    while (a % m != 1)
    {
        r.push_back(((m - m % a) / a) * -1);
        int n = m;
        m = a;
        a = (n % a);
    }
    /* cout << "r: ";
     for (auto const& element : r)
     {
         std::cout << element << ' ';
     }
     cout << endl;
     */
    int d = 0;
    int b = 1;
    int c;

    for (int i = 0; i < r.size(); i++)
    {
        c = b * r[i] + d;
        d = b;
        b = c;
    }
    if (b < 0) { return M + b; }
    return b;
}







vector<int> func(int x,  int y, int  m) 
{
    vector<int> res;
    if ( gcd(y,m) == 1  )
    {
        res.push_back( obernene(y, m)*x % m    );
        return res;
    }
    else
    {
      int  nsd = gcd(y, m);
      if (x % nsd == 0) {
          int m1 = m / nsd;
          int a1 = obernene(y / nsd, m1);
          int x0 = (a1 * x / nsd) % m1;
          for (int i = 0; i < nsd; i++)
          {
              res.push_back(x0 + i * m1);
          }
          return res;
      }
    }
    return res;
}


string Uncipher(string text, int a, int b)
{
    string result = "";
    for (int i = 1; i < text.size(); i += 2)
    {
        string bigram;
        int res;
        bigram = text[i - 1];
        bigram += text[i];
        if (obernene(a, 961) == 0) return "";
        res = obernene(a, 961) * ((index.find(bigram[0])->second) * 31 + index.find(bigram[1])->second - b);
        res = res % 961;
       // cout << res << endl;
        if (res < 0)
        {
            res = 961 + res;
        }
       // cout << res << endl;
        string b2; 
        b2 += letter.find(res % 31)->second;
        int c = res - index.find(b2[0])->second;
        if (c < 0) c = 961 + c;
        b2 += letter.find( c % 30)->second;
        result += b2[1];
        result += b2[0];
    }
    return result;
}

int main()
{
    setlocale(LC_ALL, "Russian");





    for (int i = 0; i < Alphabet.size(); i++)
    {
        index[Alphabet[i]] = i;
        letter[i] = Alphabet[i];
    }

    string text = "ывлеюгзебщпещхщуйэвиывиюфгувхцубхщыюнюжлепэшфмиьхдощбуднзегдщебоцвшуюгьпцвэщувкмзеиэбчиюндхщюасдбмонхегщгдэщжезьщемвощфысьмайыегыйяййыэшжеаекидщщеюжгьдеьцонгочвнюиюыжвюудеьбюгьщесфвшвоюзйэящкщьюгочвнюлмшужеейцурпцвдэяхщаюьдеуэвющэвдиайятвепцвчвлеюйщецыаешвэеяикгехщаэациэибвкмрйжуажййдекущтепэшфмздсугьвоцвяйкзфтшшхдуюиьйынюгдхацовойэращеюияциаяимюыжцввджвяцэввлломоодмхщуйэмюэзопюзкнэщегбдсефвьхбжщенюцатщввэиегтеаехохтюйлдицзьхдщщщюяьзщюоцвлеюосдлузлзащавызйферддьйомюиаыьепжмнюбжщцаещэзойтзэвзвщупмюжьощшаощвыжееююззьдеаейюшдоездюйбпгьвиюэколпщхмоихсшфеэмлеотзомщйвхцывбжхебахиэьщхйэашжеттфележебдфюфпнюфмшуиэжяппшдгдщесдцжцвхеюцхеяднвжееютбзййысддемилпмюзахшнюлллоюэпподйшяюьхщужиуцтабззлзьйопнбоящпиэщииамленйхдбднвнщлврпшилмиьадшахушайыэффтппмюцдсззезщадцьцихжшуфгбиэихеныжпбоцднесдегмаущйыктгдыйктййнвмоктздгидатаомтщлвхеийрдимяцшуьюывмтшзюашнэьгоэавюрдвджгмпиээщеиэивдодзехатщйыэшззшзунзщхеюизчсдэайэхенвжьфжпсхгчплвжмвиртдэппщуртцюиэппедчйдещорпдпвюбжлотвдюлофехщыддетеодаьйояхрдбмлпнднелеыщхдощуцщазнибыутвднтащебацэзьгордфесьаещзкнсднюятьдаахмчвюцхеиовющежемпзькюжямюгьщцсбвдсчепзлепэшбмтвгоэвубюзмвппцинэзьэщтапуиэпхлеоенщнщрдэщлабмхтфуиюййаещэдэвлюцрпбжэщыдидсдщохилпийшгмищцвюбйощйапедмлесгцатьчщбуэьгйцамиэавдкюяцрорпбдкьйомьщеаохдяючвейчвэухвьхэерючежюшзюахмрпяйзхфйдыжецэзчящктмоодььепюйяйрйощоюцдиеиатщхщнеэмьхгьощщеоюиьвдгивюыжшухехщкдэщжюяцлщлейдюйбпгьюйяйгдидндидбосдьдиараощаагюывмтвдцэзэяхщаыйжгпюфпэшяияйхмлпияюцмахщмайвкмшуовывбочвгййобуиэывзджююцгйбасдйэвюэасуяхуцбущуфтлпэьвмхшоеяхрпдюцибофебаитвлпхлпэьуеюююэлпбийэлпбинюфугьвоцвхестюцгдтэфйнеэатщщавытдщааошумюжячеаееоодзтлояййысьюцсьмашайыьхлеяюсбфеюоэщуйзлепрдюйкизолюуцобуйюгктнвэииюдэяхщагююцхенедефепэлпсаийкиящбушзшзунтахаьыхдрпдэьщчижеьюхибунюзьдесьюцаетщфеюайвкмжгеэзчхаздхенехднвящжесьвчаеяютвючсьцукммюфпэьхцхенеещжпмюфгцвцвзщяшдыээжежуйэфгэзюайычщоднвкгшвиьвчлпэьяьхэжмьхиьбщйыфпжягьматщаефмлесгцадьтцэьакгдйпгцэьдемимоэщчртщгдьцэьщщузмюнпамвикнсшувлонвиюовкмлебпчвмвзьжемвшзгдяиампнлоппбообхдвыхщнвшуялнюгьэабуохобхдзечадыегжеыщхдктеаюаирюунедмщуудвайыэанвфупдэмчвмьщелеяймоюааачвэуопэьжеюэюааееыпхщаэаяхзснгыетепюхиэьаелецюктпмзшршеьбюекгдьвтщщдчиубждгдхеьцкнвюиэвднвфузчшщдетадшимжйцумюэщчйощйаэмтщвдеьйомюхебавахивлфеионвздоюубтесаыдхщнвшуцуюэрдцзщхмвлоцущцшайюшдрддебочищукмжйпиуцфйжпщцоеидфгшйощемлмжгвдфвюаюообюаюьймвшжеэуяххариндщщэщгщчикгялнювамжфуощпйццмюегнещеегбдфюфпюйбпгьфпжяиэцвтбнещеегбмлещщзеяйьддьяецыфгсцфжтбшвяцвиощиалещщнвбчрйхаюиючпммьшгяошулобжфгфиыжпптбшвиьййраыьнщеаощяэшулопдицщццаявяцбуиьэщхдвыбщпееыаебухтвдсдощийыщцыэщзщцймилмлежщощрасгиацэиюшщыйзащеоюиьцвмтшзлебджювшщхщужиубяэшулопдхомццвяйощвыявжявщэаадощыщтщкщфйыьжеуцщуыднвлеьэяхщабммоппмвппдюлмледшяйдужижиженввиищятпнзетечютдюйбпгьчизднвепфйзщиакунэшщфпызяйтьхиэиианвзшущиорпбдпюцижефвчвйэгцлпнющецыаеямтщтаэаощськммочиэилпбоодэаьдааощчвощоюшдийрднпцвдщнюиадежпиэвиьхсшрдехщуйэтфппрюфпюцпмлпиящцоугьцааюфпэьаэвдтщфеоещпхэбоннощиафпжяфпцвчвжьфждэлолвяьчвдодэйайыжевыоененезаиаразевыбвжйцулмлепеяшдерйхаюииэяхщагютврюфпэшиацаыввюсюлоюэуцвшэщйыаегюфпгьпднеизящсджпннхезефюфпящчвэвьхлммьдшоюьхиьрйрарежюгьщелекщтьээмюфзнэцвсдмааеюиэисьмюцвэиубэфгщдещечйшвюзкоусжээщтеяииюфггщкееюччэацапесьзецюмозьхцоуоеуюмодшяййыхетеуиэижецэзчтэгчяййыбозэгчяййымааейшгюдпюйбпгьищщхйэзьлвепцвсдчйыутвывяцбехдыиьхзавдсщяобамщсдэанелезатэфйфщиээщнежетщгдидчвряоеуюжйжпннтвшивлугцхлехщтапэсбеелеяоодгджюубвюцдеюччщупнлмлеяешайыиалимьящфгмючехйуышзкоусбщмазщбиьхзазьйысьзьюауйжекюжмтщкдцьщхйэашцааюцвмабзнэщежееюсюбжовщцэапейцщцвюлозьйычвййзаятдпэшьхлеяюсбеужищеегдьдэбоодфееаоененетщкервтвэитзщанезчудйожецэзчкмючсджэзлрдяюнюиюэзмюсетпыжтащенепхсшыщьвчвнюлоиэяцсбэапепещдйогдыйхедетамайвднвюдэяхщавомоодбпртгьоецуппиачпковфндхщоедесшсдкюэьдэяцсдцааюцвэщфепэюцзасеяинэшзчуртэщсззееысдкюмвежцищемарцзлцвпепемайыщпзьуасьцвэиюэяхщавоцэлеююфпрдеыэвчвтааеувэетеьджюсббамщиаиьмахенщщавысьщцяцодчэтдбщпенегдеаиююуэзлвиюэзлпмотвяьреэщдепвлпзщшаощсуяхсуяхлпвидшхщпелееецацабацыещзщеггдюпшщмцкнвюутючшабщощщщэщжлзьдшфглоиэюаэьубяшбммьшгжюуббуиьппбжхееэщуьхамьхфйсщощвыятжмючктюцощщпвлхешекюиэзосднефепэчщущхдижппчиртлпчврянюбоодщэзопсеьаохтгднщхекудээиэибацыещкибохтгдййаююэяхщаяэяхщавонвздадяйтьреошйынщмаонгоюзщатаььтаэазехдвьнйнвэьдюртюцгсдееэюцгющцччщупнлмжмящнюпхмьшияцдеыуппамрпзьроадздыщчврялежпсбамгдещнвсбэаэщьэяхщаеадежпиээщщьюцмюепаелешгкитвяцдееюдпэьдюиюложьвиибпейцамиьоецуппбозацыжервщцжиртлпцацытдоехдсвщцюзмвусщекуяцфгкмрпцвсдчйбщцщлоцвкгвюфттщнгкмжгпййождгдфгнхрйжщиаквбжхебуктюаоюцдзщшгюйбпгьбпбюфпбвмьщелеяйэщщднесдроюэппамбжронвжешатьэзребциюывэцчврятазщрдюйкизоажхенежетщттххдэтахщшщсьцвэиюэяхщалттвящуэбчиюндамтщжпунлпэшшвчвйэрпуюиьрйещйыэшдеюйбазеашлльюусзочвцаделекюцииайгшацвэшвдсдтщеорпиьчврясдщелечпбопнххлпфмшуиэщщсдлоиэледещохиболпжйсднегужиоаэвбжронвпйцвгщнюаеегыюфпждвпщюиьаепзкнбатахщьпсефггдяилмепэшэвчвадздююубиьмюмтчеодеычмдэлпепэьйыямвиртюцсшсднвлптвэиубшштиубзчшгыьгйцаоиэивюрдрячиртлпщещьмоодяюзьжгхюйэяхщабмчвлеааатюцгсхеэщщднесдюфывепнюсьлоздшшианвщузлмюхебуэьрймщшатьтцьеэуллмюзэгцлпнюшвчвиьрйещеьбюбжщенюиьмахенщтьаобчйэылщхрдшгматжщешгмааеюцжьгджювитщразервяцсехдйнощзацыбддебщпезмйэтвощжестюцгдиавоцвмюцвэулллотвнюжнмющхлеуииьтаэазехдющдетаэадужиубхошунхрдощнвшардздхылофмгдмащавыцюэздщощоеядьзхвдюэзмочпцвлпиьгоощнвпйсьшузохефпызяйтьрехджоодэввифйядшаждгдфггщнерйюглофцчвтщхдвыпелебдеыаеьйнщыщхдгдбмгдхдбщььзецюьхнэсфибнвиювичврянвзшрйвдзджюлмгчхтзбчишщюаюьтайгшаощюоэшййшоэшещяйгдтидщвоюзйэхесдегжщюаыьзекжгьщенюэьщцфцжштьыьжеуцюаюьтаэахщчвэвьхэеэщхдупндидвоюзйэсдвчщупнлмтщжпежуддежпунтвовднвюяхмощуепнюдещечйшвчвьхзанэудеьщйжпннтвшиэихещщеьаожецэзчкмопияжмрплобчжоцвмозохтюйквэипхнэмвижппщцюэдэтвэипхнэмвзочвжпннмвцвщцэардздхытцбойэлмдэяццыцвэшявхжпдидьдмаеылочводэжгьюйбауэяхщавочвнюжйядтпктаевшэфмюлоылмьмоодпзощпищуээяцыщзщиовюьхюааьтаэазехдзющцдевдюпиьоецумвбииюмюдэпааюфпбуиьэзээяхщагючвяцсехдзюэизеэщощвыамьхфйсщощфйзщшнюучаущюимьюжфучугьоддпэьовлмяхусидгщкухтхеажщедещиюаугшазевытпктепиьсхчвмоюзопщувюывяьчщдецуыьбщщхйэунищцжфтзелммьщебджюсбюанвшубюфгеэяхщаыйцачюэирпмюамлпияцднеунощбпвзвимождгдяйдвмюьщегфгыюфпсесакумюфгоажгщьвияцжпмохенюятздэаьпзьхегехщыйяйдужибочвэухвэсюаяйбацыещзщэабвюатайывдсуыжывдюиэмошушйиадечюмюзэциуцнщхекудэяцепзьхестюцсшэщаеиовифйлхнэлвижппикщежесьмюкмщджгмяппсбхщжвччнюшияцюужгщдеьжечмзьмюййнежетщщехдйанюэьюэлвиаэабнппяцнвжегдпмзобднердздшамйдвеавэнщещамхвусеьыьрйчайыгдчиэижпунудщехехдьжыввмиькдбовшвыэьаееадебпээкоудкюдэяхщаеапехдизопбжщещечирттвдюлмлеоелжлпчвййщщгдидййтельиюдохжящэаюйбатьцчгдкьвдюжвюубщпзьсюцвбжщефебалимьтесьюцсуяхубвдыюэенвздажщеощшшщешежэудеьоезелаллжмадбщяиэиюайгкукоудеьээяхщабмшузьмасллотвьщдецуьхлпйтаияцгпэзбоцвещяйсдкюцвюзаихевджюсбеавэнщшвяцзщцюфпбуйэрпхаьллотвюшдеэщбачмжмвддыллкмбжбщжпежепиьаэгцуджэяхщагюфтианжщеэвнюэехеяецыойидкмхшоекуяцдэхеажщещещхиьнйююфпьхрдяднючвкмшууеошйыунзебвчвййнвсдчхрдщеэаяюубсдкюцвцэзьовывхшфеьэяхщащщбмйэбщкижмюфпмлпвоубкщжещехеэфлошусдеьбюдэчврпшинююцхеиилмйэзлзайыяецыхесдийрддшлльюуссдэахдоехеаеяюкмтщрдкюхтыжюцядэащдба";
    cout << Uncipher(text, 441, 310);
    for (int i = 1; i < text.size(); i += 2)
    {
        string a;
        a = text[i - 1];
        a += text[i];
        biCount[a] += 1;
    }



    map<string, int>::iterator it = biCount.begin();
    for (int i = 0; it != biCount.end(); it++, i++) {
      //  cout << it->first << " - " << it->second << endl;
        mostCommon[it->second] = it->first;
    }

    map<int, string>::iterator it2 = mostCommon.begin();;
    for (int i = 0; it2 != mostCommon.end(); it2++, i++) {
      //  cout << it2->first << " - " << it2->second << endl;
    }

    string Common[] = { "ще","чв","хе","ле","хщ" };

    string CommonLang[] = { "ст","но","то","на","ен" };
    for (int i = 0; i < 5; i++)
    {
        for (int j = 0; j < 5; j++)
        {
                for (int k = 0; k < 5; k++)
                {
                    for (int l = 0; l < 5; l++)
                    {
                        if (i != k && j != l)
                        {
                            
                            cout << Common[i] << " -" << CommonLang[j] << endl;
                            cout << Common[k] << " -" << CommonLang[l] << endl;
                      
                            
                            int x1 = index.find(Common[i][0])->second * 31 + index.find(Common[i][1])->second;
                            int y1 = index.find(CommonLang[j][0])->second * 31 + index.find(CommonLang[j][1])->second;
                            int x2 = index.find(Common[k][0])->second * 31 + index.find(Common[k][1])->second;
                            int y2 = index.find(CommonLang[l][0])->second * 31 + index.find(CommonLang[l][1])->second;
                           cout << x1 << " - " << y1 << endl;
                           cout << x2 << " - " << y2 << endl;
                           int X = x1 - x2;
                           int Y = y1 - y2;
                            if (X < 0) X = 961 + X;
                            if (Y < 0) Y = 961 + Y;
                            cout << X << " - " << Y << endl;
                            for (auto const& element : func(X, Y, 961))
                            {
                                cout << element << ' ';
                                int a = element;
                                int b = (x1 - y1 * a) % 961;
                                if (b < 0) b = 961 + b;                           
                                cout << "[" << a << "," << b << "]" << endl;
                                string unci = Uncipher(text, a, b);
                                bool gd = true;
                                for (int i = 1; i < unci.size(); i+=2)
                                {
                                    string bigr;
                                    bigr += unci[i - 1];
                                    bigr += unci[i];
                                    if (bigr == "аь" ||bigr == "ыь" || bigr == "юо" || bigr == "эа")
                                    {
                                        gd = false;
                                    }
                                }
                                   if(gd == true) cout << unci << endl;
                                   
                            }
                        }
                    }
                }
        }
    }
}

